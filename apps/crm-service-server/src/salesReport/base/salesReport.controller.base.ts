/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInterceptor } from "@nestjs/platform-express";
import { SalesReportService } from "../salesReport.service";
import { SalesReportCreateInput } from "./SalesReportCreateInput";
import { SalesReport } from "./SalesReport";
import { SalesReportFindManyArgs } from "./SalesReportFindManyArgs";
import { SalesReportWhereUniqueInput } from "./SalesReportWhereUniqueInput";
import { SalesReportUpdateInput } from "./SalesReportUpdateInput";

export class SalesReportControllerBase {
  constructor(protected readonly service: SalesReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesReport })
  async createSalesReport(
    @common.Body() data: SalesReportCreateInput
  ): Promise<SalesReport> {
    return await this.service.createSalesReport({
      data: {
        ...data,

        employee: data.employee
          ? {
              connect: data.employee,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,

        employee: {
          select: {
            id: true,
          },
        },

        file: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesReport] })
  @ApiNestedQuery(SalesReportFindManyArgs)
  async salesReports(@common.Req() request: Request): Promise<SalesReport[]> {
    const args = plainToClass(SalesReportFindManyArgs, request.query);
    return this.service.salesReports({
      ...args,
      select: {
        createdAt: true,
        date: true,

        employee: {
          select: {
            id: true,
          },
        },

        file: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesReport(
    @common.Param() params: SalesReportWhereUniqueInput
  ): Promise<SalesReport | null> {
    const result = await this.service.salesReport({
      where: params,
      select: {
        createdAt: true,
        date: true,

        employee: {
          select: {
            id: true,
          },
        },

        file: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesReport(
    @common.Param() params: SalesReportWhereUniqueInput,
    @common.Body() data: SalesReportUpdateInput
  ): Promise<SalesReport | null> {
    try {
      return await this.service.updateSalesReport({
        where: params,
        data: {
          ...data,

          employee: data.employee
            ? {
                connect: data.employee,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,

          employee: {
            select: {
              id: true,
            },
          },

          file: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesReport(
    @common.Param() params: SalesReportWhereUniqueInput
  ): Promise<SalesReport | null> {
    try {
      return await this.service.deleteSalesReport({
        where: params,
        select: {
          createdAt: true,
          date: true,

          employee: {
            select: {
              id: true,
            },
          },

          file: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/file")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: SalesReport,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadFile(
    @common.Param()
    params: SalesReportWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<SalesReport> {
    return this.service.uploadFile(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/file")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadFile(
    @common.Param()
    params: SalesReportWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadFile({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/file")
  @swagger.ApiOkResponse({
    type: SalesReport,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteFile(
    @common.Param()
    params: SalesReportWhereUniqueInput
  ): Promise<SalesReport> {
    return this.service.deleteFile({
      where: params,
    });
  }
}
