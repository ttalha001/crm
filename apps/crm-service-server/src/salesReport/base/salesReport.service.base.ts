/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SalesReport as PrismaSalesReport,
  Employee as PrismaEmployee,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class SalesReportServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.SalesReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesReport.count(args);
  }

  async salesReports(
    args: Prisma.SalesReportFindManyArgs
  ): Promise<PrismaSalesReport[]> {
    return this.prisma.salesReport.findMany(args);
  }
  async salesReport(
    args: Prisma.SalesReportFindUniqueArgs
  ): Promise<PrismaSalesReport | null> {
    return this.prisma.salesReport.findUnique(args);
  }
  async createSalesReport(
    args: Prisma.SalesReportCreateArgs
  ): Promise<PrismaSalesReport> {
    return this.prisma.salesReport.create(args);
  }
  async updateSalesReport(
    args: Prisma.SalesReportUpdateArgs
  ): Promise<PrismaSalesReport> {
    return this.prisma.salesReport.update(args);
  }
  async deleteSalesReport(
    args: Prisma.SalesReportDeleteArgs
  ): Promise<PrismaSalesReport> {
    return this.prisma.salesReport.delete(args);
  }

  async uploadFile<T extends Prisma.SalesReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalesReportFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaSalesReport> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "file";
    const file = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.salesReport.update({
      where: args.where,

      data: {
        file: file as InputJsonValue,
      },
    });
  }

  async downloadFile<T extends Prisma.SalesReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalesReportFindUniqueArgs>
  ): Promise<FileDownload> {
    const { file } = await this.prisma.salesReport.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      file as unknown as LocalStorageFile
    );
  }

  async deleteFile<T extends Prisma.SalesReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalesReportFindUniqueArgs>
  ): Promise<PrismaSalesReport> {
    const { file } = await this.prisma.salesReport.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      file as unknown as LocalStorageFile
    );

    return await this.prisma.salesReport.update({
      where: args.where,

      data: {
        file: Prisma.DbNull,
      },
    });
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.salesReport
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
